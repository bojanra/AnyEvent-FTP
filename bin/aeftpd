#!/usr/bin/perl

use strict;
use warnings;
use v5.10;
use AnyEvent;
use AnyEvent::FTP::Server;
use Getopt::Long qw( GetOptions );
use URI;
use Pod::Usage qw( pod2usage );

# PODNAME: aeftpd
# ABSTRACT: FTP Server
# VERSION

=head1 SYNOPSIS

 % aeftpd [ --port port ] \
          [ --hostname hostname ] \
          [ --inet ] \
          [ --stderr path ] \
          [ --pam service ] \
          [ --chroot ]
 % aeftpd --version
 % aeftpd --help

=head1 DESCRIPTION

This program starts an FTP daemon using the perl library L<AnyEvent::FTP::Server>.

=head1 OPTIONS

=head2 --port port

The TCP port to listen to.

=head2 --hostname hostname

The hostname or IP address to listen on.

=head2 --inet

Run in inet mode.  By default C<aeftpd> runs as a single process in standalone mode.
By using this option you can run C<aeftp> from C<inetd>, C<xinetd> or similar daemon.
Here is a line for /etc/inetd.conf which was tested on Debian Wheezy, and may work
for you if your operating system suppors PAM and you have L<Authen::Simple::PAM>
installed.

 ftp stream tcp nowait root /usr/sbin/tcpd aeftpd --inet --stderr /tmp/aeftp.log --pam login

=head2 --stderr path

Redirect stderr from the daemon to the file specified by the given path

=head2 --chroot

Use C<chroot> to restrict the user to only his home directory once he has logged
in.  This option requires the C<chroot> function, which is supported by Perl on
most UNIX and UNIX like operating systems.

=head2 --version

Print out the L<AnyEvent::FTP> version to stdout and exit.

=head2 --help

Display the usage for this command.

=cut

my $port;
my $host;
my $inet = 0;
my $stderr;
my $pam;
my $chroot = 0;

GetOptions(
  'port=i'     => \$port,
  'hostname=s' => \$host,
  'inet'       => \$inet,
  'stderr=s'   => \$stderr,
  'pam=s'      => \$pam,
  'chroot'     => \$chroot,
  'help|h'     => sub { pod2usage({ -verbose => 2}) },
  'version'    => sub { say 'aeftp/AnyEvent::FTP version ', ($AnyEvent::FTP::Server::VERSION // 'dev'); exit 1 },
) || pod2usage(1);

$0 = 'aeftpd';

$port //= ($> && $^O !~ /^(cygwin|MSWin32)$/) ? 8021 : 21;

if($stderr)
{
  open STDERR, '>>', $stderr;
}

unless($inet)
{
  my $uri = URI->new('ftp:');
  $uri->host($host // 'localhost');
  $uri->port($port);
  say $uri;
}

my $server = AnyEvent::FTP::Server->new(
  hostname => $host,
  port     => $port,
  inet     => $inet,
);

if($pam)
{
  eval { require Authen::Simple::PAM };
  if($@)
  {
    say STDERR "PAM authentication requires Authen::Simple::PAM to be installed";
    exit 2;
  }
  
  $pam = Authen::Simple::PAM->new(
    service => $pam,
  );
  
  $server->on_connect(sub {
    my $con = shift;
    
    my $user_class;
    if($inet && $< == 0 && $^O !~ /^(cygwin|MSWin32)$/)
    {
      $user_class = 'AnyEvent::FTP::Server::OS::UNIX';
      eval "use $user_class"; die $@ if $@;
    }
    
    $con->context->authenticator(sub {
      my($name, $pass) = @_;
      
      $name = 'ftp' if $name eq 'anonymous';
      
      my $user;
      if(defined $user_class)
      {
        $user = eval { $user_class->new($name) };
        return 0 if $@;
      }
      
      return 0 if $name ne 'ftp' && ! $pam->authenticate( $name, $pass );
      
      if(defined $user)
      {
        $user->jail if $chroot || $name eq 'ftp';
        $user->drop_privileges;
      }
      
      1;
    });
    $con->context->bad_authentication_delay(0);

    if($stderr)
    {
      say STDERR "CONNECT";
    
      $con->on_request(sub {
        my $raw = shift;
        say STDERR "CLIENT: $raw";
      });
    
      $con->on_response(sub {
        my $raw = shift;
        $raw =~ s/\015?\012$//g;
        say STDERR "SERVER: $raw";
      });
    
      $con->on_close(sub {
        say STDERR "DISCONNECT";
      });
    }
    
  });
}

$server->start;

AnyEvent->condvar->recv;
